{"timestamp":"2025-08-27T23:29:55.557955","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-08-27T23:29:55.558528","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/e_com_ETL.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-08-27T23:29:55.589877","level":"info","event":"Executing: -- Step 1: Set the start and end dates\nDO $$\nDECLARE\n    start_date DATE := '1990-01-01';\n    end_date DATE := '2050-12-31';\nBEGIN\n    -- Step 2: Use GENERATE_SERIES to create and insert all the dates\n    INSERT INTO core.dim_date (\n        date_PK,\n        full_date,\n        day_of_week,\n        day_name_of_week,\n        day_of_month,\n        day_of_year,\n        week_of_year,\n        month_of_year,\n        month_name,\n        quarter_of_year,\n        quarter_name,\n        year,\n        is_weekend,\n        is_holiday\n    )\n    SELECT\n        -- DateKey in YYYYMMDD format\n        CAST(TO_CHAR(day_series, 'YYYYMMDD') AS INT),\n        day_series::DATE,\n        EXTRACT(DOW FROM day_series), -- DOW = day of week (0=Sunday, 6=Saturday)\n        TRIM(TO_CHAR(day_series, 'Day')),\n        EXTRACT(DAY FROM day_series),\n        EXTRACT(DOY FROM day_series),\n        EXTRACT(WEEK FROM day_series),\n        EXTRACT(MONTH FROM day_series),\n        TRIM(TO_CHAR(day_series, 'Month')),\n        EXTRACT(QUARTER FROM day_series),\n        'Q' || EXTRACT(QUARTER FROM day_series)::TEXT,\n        EXTRACT(YEAR FROM day_series),\n        -- IsWeekend: DOW=0 for Sunday and 6 for Saturday\n        CASE WHEN EXTRACT(DOW FROM day_series) IN (0, 6) THEN TRUE ELSE FALSE END,\n        FALSE -- Placeholder for holiday logic\n    FROM generate_series(start_date, end_date, '1 day'::interval) AS day_series;\nEND $$;","logger":"airflow.task.operators.airflow.providers.common.sql.operators.sql.SQLExecuteQueryOperator"}
{"timestamp":"2025-08-27T23:29:55.590907","level":"warning","event":"Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `from airflow.sdk import Connection` instead","category":"DeprecationWarning","filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py","lineno":471,"logger":"py.warnings"}
{"timestamp":"2025-08-27T23:29:55.595298","level":"info","event":"Connection Retrieved 'DWH'","logger":"airflow.hooks.base"}
{"timestamp":"2025-08-27T23:29:55.600204","level":"info","event":"Connection Retrieved 'DWH'","logger":"airflow.hooks.base"}
{"timestamp":"2025-08-27T23:29:55.602801","level":"info","event":"Running statement: -- Step 1: Set the start and end dates\nDO $$\nDECLARE\n    start_date DATE := '1990-01-01';\n    end_date DATE := '2050-12-31';\nBEGIN\n    -- Step 2: Use GENERATE_SERIES to create and insert all the dates\n    INSERT INTO core.dim_date (\n        date_PK,\n        full_date,\n        day_of_week,\n        day_name_of_week,\n        day_of_month,\n        day_of_year,\n        week_of_year,\n        month_of_year,\n        month_name,\n        quarter_of_year,\n        quarter_name,\n        year,\n        is_weekend,\n        is_holiday\n    )\n    SELECT\n        -- DateKey in YYYYMMDD format\n        CAST(TO_CHAR(day_series, 'YYYYMMDD') AS INT),\n        day_series::DATE,\n        EXTRACT(DOW FROM day_series), -- DOW = day of week (0=Sunday, 6=Saturday)\n        TRIM(TO_CHAR(day_series, 'Day')),\n        EXTRACT(DAY FROM day_series),\n        EXTRACT(DOY FROM day_series),\n        EXTRACT(WEEK FROM day_series),\n        EXTRACT(MONTH FROM day_series),\n        TRIM(TO_CHAR(day_series, 'Month')),\n        EXTRACT(QUARTER FROM day_series),\n        'Q' || EXTRACT(QUARTER FROM day_series)::TEXT,\n        EXTRACT(YEAR FROM day_series),\n        -- IsWeekend: DOW=0 for Sunday and 6 for Saturday\n        CASE WHEN EXTRACT(DOW FROM day_series) IN (0, 6) THEN TRUE ELSE FALSE END,\n        FALSE -- Placeholder for holiday logic\n    FROM generate_series(start_date, end_date, '1 day'::interval) AS day_series;\nEND $$;, parameters: None","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
